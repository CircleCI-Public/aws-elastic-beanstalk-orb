version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
  orb-tools: circleci/orb-tools@12.0
  aws-elastic-beanstalk: {}

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-install-eb-cli:
    parameters:
      executor:
        type: executor
        default:
      version:
        type: string
        default:
    executor: << parameters.executor >>
    environment:
      ORB_EVAL_EB_CLI_VERSION: << parameters.version >>
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: arn:aws:iam::122211685980:role/CPE_ELASTIC_BEANSTALK_TEST
      - aws-elastic-beanstalk/setup:
          version: << parameters.version >>
      - run:
          name: Verify EB install
          command: |
            command -v eb >/dev/null 2>&1 || { echo >&2 "EB cli failed to install or persist to the path"; exit 1; }
      - run:
          name: Test app version
          command: |
            echo "Checking CLI versions..."
            # Extracts the version number from the eb --version output
            EBCLI_VERSION=$(eb --version | awk '{print $3}')
            # Uses python to isolate the latest ebcli version number from the pypi json.
            EBCLI_LATEST_VERSION=$(python3 -c "import json, urllib.request; print(json.load(urllib.request.urlopen('https://pypi.org/pypi/awsebcli/json'))['info']['version'])")""
            # To prevent confusion when the string is empty (due to default), set input version to latest version
            if [ -z "$ORB_EVAL_EB_CLI_VERSION" ]; then
              ORB_EVAL_EB_CLI_VERSION="$EBCLI_LATEST_VERSION"
            fi
            # Prints the version numbers to the console
            echo "Latest CLI version: $EBCLI_LATEST_VERSION"
            echo "Expected CLI version: $ORB_EVAL_EB_CLI_VERSION"
            echo "Elastic Beanstalk CLI version: $EBCLI_VERSION"

            # Checks if the installed version matches the expected version
            if [ -n "$EBCLI_VERSION" ] && [ -n "$ORB_EVAL_EB_CLI_VERSION" ] && [ -n "$EBCLI_LATEST_VERSION" ]; then
              if [ "$EBCLI_VERSION" == "$ORB_EVAL_EB_CLI_VERSION" ]; then
                echo "CLI version matches expected version."
              else
                echo "Error: CLI version does not match expected version." >&2
                exit 1
              fi
            else
              # This error is thrown when either of the above version envs don't get properly set
              echo "Error: Something went wrong with the EB installation. Unable to acquire version(s)." >&2
              exit 1
            fi
  integration-test-deploy-setup:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: arn:aws:iam::122211685980:role/CPE_ELASTIC_BEANSTALK_TEST
      - aws-elastic-beanstalk/setup
      - run:
          name: EB Create
          command: |
            cd sample_app
            eb init sample_app -r $AWS_DEFAULT_REGION -p node.js --profile default
            eb init sample_app -r us-west-2 -p node.js --profile default
workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - integration-test-install-eb-cli:
          context: [CPE-OIDC]
          matrix:
            parameters:
              executor: [python, base]
              # Emtpy string will use latest version, otherwise testing random recent versions
              version: ["", "3.20.5", "3.20.3", "3.20.2", "3.20.0"]
          filters: *filters
      - integration-test-deploy-setup:
          context: [CPE-OIDC]
          requires:
            - integration-test-install-eb-cli
          filters: *filters
      - aws-elastic-beanstalk/deploy:
          post-steps:
            - run:
                name: Test deployed app
                working_directory: ./sample_app
                command: curl $(eb status | grep CNAME | cut -d ":" -f 2)
          auth:
            - aws-cli/setup:
                role-arn: arn:aws:iam::122211685980:role/CPE_ELASTIC_BEANSTALK_TEST
                role-session-name: OIDC-Test-Session
          context: [CPE-OIDC]
          environment_name: sample-app-env
          application_name: sample_app
          label: test-label
          app_dir: ./sample_app
          requires:
            - integration-test-deploy-setup
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/aws-elastic-beanstalk
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires: [orb-tools/pack, integration-test-install-eb-cli, integration-test-deploy-setup, aws-elastic-beanstalk/deploy]
          context: orb-publisher
          enable_pr_comment: true
          github_token: GHI_TOKEN
          filters: *release-filters
executors:
  python:
    docker:
      - image: cimg/python:3.11
  base:
    docker:
      - image: cimg/base:current
